<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>闭包</title>
    <url>/2020/03/26/%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="闭包的产生"><a href="#闭包的产生" class="headerlink" title="闭包的产生"></a>闭包的产生</h2><p>当一个嵌套的内部（子）函数引用了嵌套的外部（父）函数的变量（函数）时，就产生了闭包</p>
<h2 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h2><p>一.闭包是嵌套的内部函数<br>二.是包含被引用变量的对象<br><strong>注意：闭包存在于嵌套的内部函数中</strong></p>
<a id="more"></a>
<h2 id="产生闭包的条件"><a href="#产生闭包的条件" class="headerlink" title="产生闭包的条件"></a>产生闭包的条件</h2><p>函数嵌套<br>内部函数调用了外部函数的数据（变量/函数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn1()&#123;</span><br><span class="line">        var a&#x3D;2</span><br><span class="line">        var b&#x3D;&#39;abc&#39;</span><br><span class="line">        function fn2()&#123; &#x2F;&#x2F;执行内部函数定义时就会产生闭包（不用调用内部函数）</span><br><span class="line">            console.log(a)</span><br><span class="line">        &#125;</span><br><span class="line">        fn2()</span><br><span class="line">    &#125;</span><br><span class="line">    fn1()</span><br></pre></td></tr></table></figure>
<h2 id="常见的闭包"><a href="#常见的闭包" class="headerlink" title="常见的闭包"></a>常见的闭包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将函数作为另一个函数的返回值返回</span><br><span class="line"></span><br><span class="line">function fn1()&#123;      &#x2F;&#x2F;将当前执行的上下文进行压栈，执行完后就出栈了，</span><br><span class="line">        var a&#x3D;2          &#x2F;&#x2F;也就是fn1执行完就出栈了，但是返回的值fn2包含这fn1的闭包</span><br><span class="line">        function fn2()&#123;  &#x2F;&#x2F;所以第二次调用f()时，结果是4</span><br><span class="line">            a++          &#x2F;&#x2F;因为上一次调用后的a因为闭包的存在，并没有被释放</span><br><span class="line">            console.log(a) &#x2F;&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        return fn2</span><br><span class="line">    &#125;</span><br><span class="line">    var f&#x3D;fn1()</span><br><span class="line">    f() &#x2F;&#x2F;3</span><br><span class="line">    f() &#x2F;&#x2F;4</span><br><span class="line">    &#x2F;&#x2F;第一次执行到第4行是因为11行调用了fn1,此时已经产生了一次闭包，因为存在函数提升</span><br><span class="line">    &#x2F;&#x2F;执行12行13行时都会直接跳到第5行，执行内部的函数，</span><br><span class="line">    &#x2F;&#x2F;此时并没有再执行外部函数，所以并没有再产生多余的闭包</span><br><span class="line">    &#x2F;&#x2F;第4行的变量a是局部变量，但因为产生了闭包所以并没有在函数调用完后释放</span><br></pre></td></tr></table></figure>
<p><strong>注意：外部函数执行的时候才会创建内部函数，外部函数执行几次就会创建几次内部函数，也就是创建几次闭包</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;将函数作为实参传递给另一个函数调用</span><br><span class="line">   function showDelay(msg,time)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            alert(msg)</span><br><span class="line">        &#125;,time)         &#x2F;&#x2F;此时闭包中只有meg,这是对meg的引用</span><br><span class="line">    &#125;</span><br><span class="line">    showDelay(&#39;bibao&#39;,2000)</span><br></pre></td></tr></table></figure>
<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p>1.使用函数内部的变量在函数执行完后，仍然存活在内存中（延长了局部变量的生命周期）<br>2.让函数外部可以操作（读写）到函数内部的数据（变量/函数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn1()&#123;</span><br><span class="line">        var a&#x3D;2</span><br><span class="line">        function fn2()&#123;</span><br><span class="line">            a++</span><br><span class="line">            console.log(a)</span><br><span class="line">        &#125;</span><br><span class="line">        function fn3()&#123;</span><br><span class="line">            a--</span><br><span class="line">            console.log(a)</span><br><span class="line">        &#125;</span><br><span class="line">        return fn3</span><br><span class="line">    &#125;</span><br><span class="line">    var f&#x3D;fn1()    &#x2F;&#x2F;此处是对fn3的引用，所以fn3这个内部对象不是垃圾对象</span><br><span class="line">    f() &#x2F;&#x2F;1</span><br><span class="line">    f() &#x2F;&#x2F;0</span><br><span class="line">    &#x2F;&#x2F;fn1执行完后，a还在，fn2,fn3都被释放，因为此时闭包里只有a</span><br><span class="line">    &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js高级</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域</title>
    <url>/2020/03/26/%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><a id="more"></a>
<p>作用域的个数：函数的个数 + 1（全局作用域）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x&#x3D;10</span><br><span class="line">    function fn()&#123;</span><br><span class="line">        console.log(x)</span><br><span class="line">    &#125;</span><br><span class="line">    function show(f)&#123;</span><br><span class="line">        var x&#x3D;20</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line">    show(fn);   &#x2F;&#x2F;输出10，在调用函数fn时，其只能访问到全局作用域中的x&#x3D;10</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj&#x3D;&#123;</span><br><span class="line">        fn2:function()&#123;</span><br><span class="line">            console.log(fn2)    &#x2F;&#x2F;会现在该函数内部找fn2,没有，就直接去全局找，还是没有</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.fn2()   &#x2F;&#x2F;会报错，应该为console.log(this.fn2)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js高级</tag>
      </tags>
  </entry>
  <entry>
    <title>执行上下文</title>
    <url>/2020/03/25/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<h2 id="代码分类"><a href="#代码分类" class="headerlink" title="代码分类"></a>代码分类</h2><p>全局代码<br>函数（局部）代码</p>
<a id="more"></a>
<h2 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h2><h3 id="在执行全局代码前将window确定为全局执行上下文"><a href="#在执行全局代码前将window确定为全局执行上下文" class="headerlink" title="在执行全局代码前将window确定为全局执行上下文"></a>在执行全局代码前将window确定为全局执行上下文</h3><h3 id="对全局数据进行预处理"><a href="#对全局数据进行预处理" class="headerlink" title="对全局数据进行预处理"></a>对全局数据进行预处理</h3><p>var定义的全局变量==&gt;undefined,添加为window的属性<br>function声明的全局函数==&gt;赋值（fun）,添加为window的方法<br>this==&gt;赋值（window）</p>
<h3 id="开始执行全局代码"><a href="#开始执行全局代码" class="headerlink" title="开始执行全局代码"></a>开始执行全局代码</h3><h2 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h2><h3 id="在调用函数，准备执行函数体之前，创建对应的函数执行上下文"><a href="#在调用函数，准备执行函数体之前，创建对应的函数执行上下文" class="headerlink" title="在调用函数，准备执行函数体之前，创建对应的函数执行上下文"></a>在调用函数，准备执行函数体之前，创建对应的函数执行上下文</h3><h3 id="对局部数据进行预处理"><a href="#对局部数据进行预处理" class="headerlink" title="对局部数据进行预处理"></a>对局部数据进行预处理</h3><p>形参变量==&gt;赋值（实参）==&gt;添加为执行上下文的属性<br>arguments==&gt;赋值（实参列表）==&gt;添加为执行上下文的属性<br>var定义的局部变量==&gt;undefined,添加为执行上下文的属性<br>function声明的函数==&gt;赋值（fun）==&gt;添加为执行上下文的方法<br>this==&gt;赋值（调用函数的对象）</p>
<h3 id="开始执行函数体代码"><a href="#开始执行函数体代码" class="headerlink" title="开始执行函数体代码"></a>开始执行函数体代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;函数执行上下文    注意：是在调用函数时创建的</span><br><span class="line">function fn(a1)&#123;</span><br><span class="line">        console.log(a1) &#x2F;&#x2F; 2</span><br><span class="line">        console.log(a2) &#x2F;&#x2F; undefined</span><br><span class="line">        a3()    &#x2F;&#x2F;a3()</span><br><span class="line">        console.log(this)   &#x2F;&#x2F;window</span><br><span class="line">        console.log(arguments)  &#x2F;&#x2F;伪数组(2,3)</span><br><span class="line"></span><br><span class="line">        var a2&#x3D;3</span><br><span class="line">        function a3()&#123;</span><br><span class="line">            console.log(&#39;a3()&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(2,3)</span><br></pre></td></tr></table></figure>
<h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>在全局代码执行前，js引擎就会创建一个栈来存储管理所有的执行上下文对象<br>在全局执行上下文（window）创建后，将其添加到栈中（压栈）<br>在函数执行上下文创建后，将其添加到栈中（压栈）<br>在当前函数执行完后，将栈顶的对象移除（出栈）<br>当所有的代码执行完后，栈中只剩下window</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a&#x3D;10</span><br><span class="line">    var bar&#x3D;function(x)&#123;</span><br><span class="line">        var b&#x3D;5</span><br><span class="line">        foo(x+b)</span><br><span class="line">    &#125;</span><br><span class="line">    var foo&#x3D;function(y)&#123;</span><br><span class="line">        var c&#x3D;5</span><br><span class="line">        console.log(a+c+y)</span><br><span class="line">    &#125;</span><br><span class="line">    bar(10)   &#x2F;&#x2F;此代码创建了3个执行上下文（在调用函数时创建）</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&#39;global begin: &#39;+i)     &#x2F;&#x2F;undefined</span><br><span class="line">    var i&#x3D;1                         &#x2F;&#x2F;输出顺序：fb 1</span><br><span class="line">    foo(1)                          &#x2F;&#x2F;fb 2</span><br><span class="line">    function foo(i)&#123;                &#x2F;&#x2F;fb 3</span><br><span class="line">        if(i&#x3D;&#x3D;4)                    &#x2F;&#x2F;fe 3</span><br><span class="line">        &#123;                           &#x2F;&#x2F;fe 2</span><br><span class="line">            return                  &#x2F;&#x2F;fe 1</span><br><span class="line">        &#125;                           &#x2F;&#x2F;ge 1  </span><br><span class="line">        console.log(&#39;foo() begin: &#39;+i)</span><br><span class="line">        foo(i+1)</span><br><span class="line">        console.log(&#39;foo() end: &#39;+i)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#39;global end: &#39;+i)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js高级</tag>
      </tags>
  </entry>
  <entry>
    <title>博客文章的相关操作</title>
    <url>/2020/03/19/The%20basic%20operation%20of%20hexo/</url>
    <content><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="这个是三级标题"><a href="#这个是三级标题" class="headerlink" title="这个是三级标题"></a>这个是三级标题</h3><a id="more"></a>
<ul>
<li>列表1</li>
<li>列表2<br>  a 子列表1<br>  b 子列表2</li>
<li>列表3</li>
</ul>
<hr>
<p>分割线</p>
<hr>
<p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<p><img src="/images/avatar.gif" alt="图片"></p>
<p><em>字体倾斜</em><br><strong>字体加粗</strong></p>
<p><code>&lt;html&gt;&lt;/html&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;多行代码块&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此处内容是引用的</p>
</blockquote>
]]></content>
      <categories>
        <category>博客操作</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>声明提升</title>
    <url>/2020/03/19/%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>通过var定义（声明）的变量，在定义语句之前就能访问到，<br>此时该变量的值：undefined</p>
<h2 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h2><p>通过function声明的函数，在之前就可以直接调用<br>此时该函数的值：函数定义（对象）</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a&#x3D;3</span><br><span class="line">function fn()&#123;</span><br><span class="line">    console.log(a)</span><br><span class="line">    var a&#x3D;4</span><br><span class="line">&#125;</span><br><span class="line">fn()   &#x2F;&#x2F;输出 undefined</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(b) &#x2F;&#x2F;undefined  变量提升</span><br><span class="line">fn2() &#x2F;&#x2F;可调用  函数提升</span><br><span class="line">var b&#x3D;3</span><br><span class="line">function fn2()&#123;</span><br><span class="line">    console.log(&#39;fn2()&#39;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">fn3()   &#x2F;&#x2F;不能调用，应为这是通过var声明的变量</span><br><span class="line">    var fn3&#x3D;function ()&#123;</span><br><span class="line">        console.log(&#39;fn3()&#39;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;先执行变量提升，再执行函数提升</span><br><span class="line">    function a()&#123;&#125;</span><br><span class="line">    var a</span><br><span class="line">    console.log(typeof a) &#x2F;&#x2F; function</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(!(b in window))&#123;</span><br><span class="line">        var b &#x3D;1    &#x2F;&#x2F; 该变量是全局变量</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(b)  &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var c&#x3D;1</span><br><span class="line">    function c(c)&#123;</span><br><span class="line">        console.log(c)</span><br><span class="line">    &#125;</span><br><span class="line">    c(2)    &#x2F;&#x2F;报错</span><br><span class="line">    &#x2F;&#x2F;相当与</span><br><span class="line">    var c</span><br><span class="line">    function c(c)&#123;</span><br><span class="line">        console.log(c)</span><br><span class="line">    &#125;</span><br><span class="line">    c&#x3D;1</span><br><span class="line">    c(2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js高级</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
